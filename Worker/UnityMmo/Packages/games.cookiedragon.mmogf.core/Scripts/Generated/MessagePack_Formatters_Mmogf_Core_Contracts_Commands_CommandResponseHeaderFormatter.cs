// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Mmogf.Core.Contracts.Commands
{
    public sealed class CommandResponseHeaderFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Mmogf.Core.Contracts.Commands.CommandResponseHeader>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Mmogf.Core.Contracts.Commands.CommandResponseHeader value, global::MessagePack.MessagePackSerializerOptions options)
        {
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(7);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.RequestId, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Mmogf.Core.Contracts.Commands.CommandStatus>(formatterResolver).Serialize(ref writer, value.CommandStatus, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Message, options);
            writer.Write(value.RequesterId);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Mmogf.Servers.Shared.EntityId>(formatterResolver).Serialize(ref writer, value.EntityId, options);
            writer.Write(value.ComponentId);
            writer.Write(value.CommandId);
        }

        public global::Mmogf.Core.Contracts.Commands.CommandResponseHeader Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new global::System.InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Mmogf.Core.Contracts.Commands.CommandResponseHeader();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.RequestId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.CommandStatus = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Mmogf.Core.Contracts.Commands.CommandStatus>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 2:
                        ____result.Message = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 3:
                        ____result.RequesterId = reader.ReadInt64();
                        break;
                    case 4:
                        ____result.EntityId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Mmogf.Servers.Shared.EntityId>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 5:
                        ____result.ComponentId = reader.ReadInt16();
                        break;
                    case 6:
                        ____result.CommandId = reader.ReadInt16();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name
